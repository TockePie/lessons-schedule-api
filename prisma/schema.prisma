generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model group {
  name       String     @unique
  photo      String     @default("https://cdn4.iconfinder.com/data/icons/zira/128/calendar-1024.png")
  created_at DateTime   @default(now())
  group_id   String     @id @unique @default(dbgenerated("gen_random_uuid()")) @map("group_id") @db.Uuid
  updated_at DateTime   @updatedAt
  schedule   schedule[]
}

model schedule {
  id         String    @id(map: "schedule_pkey1") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  subject_id String    @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  group_id   String    @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at DateTime  @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  updated_at DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @updatedAt @db.Timestamptz(6)
  group      group     @relation(fields: [group_id], references: [group_id], onDelete: Cascade)
  subject    subject   @relation(fields: [subject_id], references: [subject_id], onDelete: Cascade)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model exam_url {
  subject_id String    @id(map: "examUrl_pkey") @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  url        String
  created_at DateTime? @db.Timestamptz(6)
  updated_at DateTime? @db.Timestamptz(6)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model subject {
  title        String
  teacher      String
  url          String?
  type         lessonType
  day          Int
  row          Int
  created_at   DateTime   @default(now())
  is_selective Boolean
  subject_id   String     @id(map: "schedule_pkey") @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  updated_at   DateTime
  week_parity  weekParity
  schedule     schedule[]
}

enum lessonType {
  LECTURE
  PRACTICE
  LAB
}

enum weekParity {
  EVEN
  ODD
  BOTH
}
